int node_count(bst t){

/**return the count of the nodes, deoes not count the frist node*/
	
	int left_c = 0, right_c = 0;

	if(t->left != NULL)  left_c = node_count(t->left) + 1;
			//go left	
	
	if(t->right != NULL) right_c =  node_count(t->right) + 1;
			//go right
	
	return left_c + right_c;
}


int get_paths(bst node, char** keys, int** paths, int* path, int height, int depth, int* count){

/**return th count of the nodes
*/
	
	if(node != NULL){
	
		keys[*count] = node->key;
		paths[*count] = emalloc(sizeof(int) * height);
		//printf("key[%d]: %s\n",*count, keys[*count]);	
		for(int i = 0; i < height; i++) paths[*count][i] = path[i];  
		*count = *count + 1;
	}

	if(node->left != NULL){
		
		path[depth] = 1;
  	get_paths(node->left, keys, paths, path, height, ++depth, count);
		path[--depth] = 0;
	}
	
	if(node->right != NULL){
		
		path[depth] = -1;
		get_paths(node->right, keys, paths, path, height, ++depth, count);
		path[--depth] = 0;
	}
	return EXIT_SUCCESS;
}

int get_level(int* path, int count){
	int level = 0;
	for(int i = 0; i < count; i++){
		if(path[i] != 0) level++;
	} 
	
return level;
}


int get_pos(int* path, int count, int height){
	int pos;
	int buffer;
	pos = ( pow(2, height) / 2);
	
		for(int level = 0; level < height; level++){
			if(path[level] == 1) pos = pos - (pos/ 2);
			else if(path[level] == -1) pos =	pos + (pos/ 2); 
			printf("level %d, path:%d, pos %d\n", level, path[level], pos);
		}	   
	

	return pos;
}

void draw_tree(char** keys, int** paths, int count, int height){
	int all_nodes = (int) (pow(2, height) - 1);
	printf("allnode%d\n",all_nodes);
	char* level = emalloc((sizeof(char) * all_nodes) + 1);
	
	for(int i = 0; i < all_nodes; i++)level[i] = ' ';
	level[all_nodes + 1] = '\0';

	
	for(int j = 1; j < height + 2; j++){
			
		for(int i = 0; i < all_nodes; i++)level[i] = ' ';

		for(int x = 0; x < count; x++){
			
			//printf("level %d : %d key : %s \n",j, get_level(paths[x], count), keys[x]);
			if(get_level(paths[x], count) == j){
				printf("key : %s ", keys[x]);
				level[get_pos(paths[x], count, height)] = keys[x][0]; 		
			}
		}

		printf("lev%d: %s\n",j, level);
	}

	//printf("all the node: %d\n", all_nodes);
	
	//printf("possition for key %s: %d\n",keys[5] , get_pos(paths[5], count, height)); 

		

} 

void bst_printg_not_working(bst t){
	
	char** keys;
	int** paths;
	int* path;
	int count;
	int height; 
	int nodes;
	
	count = 0;
	nodes = node_count(t) + 1; 
	height = get_height(t);
	
	path = emalloc(sizeof(int) * height - 1);
 	paths = emalloc(sizeof(int*) * nodes);
	keys = emalloc(sizeof(char*) * nodes);
	
 	
	for(int i = 0; i < height - 1; i++) path[i] = 0;
	for(int i = 0; i < nodes; i++){
 		paths[i] = NULL;
		keys[i] = NULL;
	}
	
 	get_paths(t, keys, paths, path, height, 0, &count);

	//printf("nodes :%d, height %d, count: %d \n", nodes, height, count); 
	for(int j = 0; j < count; j++){

		//printf("\nkey: %s\n", keys[j]);
		
		for(int i = 0; i < height - 1; i++){		
			//printf("%d,", paths[j][i]);  	
		}	
	//printf("  level: %d\n", get_level(paths[j], height));	
	}


	draw_tree(keys, paths, count, height);
}


